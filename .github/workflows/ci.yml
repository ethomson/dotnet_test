name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:

env:
  PRODUCT_NAME: foo

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.calculate-version.outputs.version }}
    steps:
    - uses: actions/checkout@v1
      name: 'Checkout'
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'
      name: 'Setup .NET 3.1'
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'
      name: 'Setup .NET 6.0'
    - run: |
        dotnet tool install -g gitversion.tool --version 5.10.1
        echo "::add-path $HOME/.dotnet/tools"
      name: Install Build Tools
      shell: bash
    - run: |
        VERSION=$($HOME/.dotnet/tools/dotnet-gitversion /UpdateAssemblyInfo | jq --raw-output .LegacySemVer)
        if [ "${VERSION}" = "" ]; then
            exit 1
        fi
        echo "Version: ${VERSION}"
        echo "::set-output name=version::${VERSION}"
      id: calculate-version
      name: Calculate version

  build_dll:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - uses: actions/checkout@v1
      name: 'Checkout'
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'
      name: 'Setup .NET 3.1'
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'
      name: 'Setup .NET 6.0'
    - run: |
        dotnet restore
        dotnet build --no-restore --configuration Release
      name: Build
    - run: |
        dotnet test Foo.Core.Tests/Foo.Core.Tests.csproj --no-build --configuration Release --logger "trx;LogFileName=Foo.Core.Tests.trx"
      name: Test
    - run: |
        mkdir _package
        cp Foo/bin/Release/net6.0/*.dll _package/
        cp Foo/bin/Release/net6.0/*.json _package/
        cp -R Foo/bin/Release/net6.0/runtimes _package/
    - uses: actions/upload-artifact@v1
      with:
        name: ${{ env.PRODUCT_NAME }}-${{ needs.setup.outputs.version }}-dll
        path: _package
      name: Upload DLLs

  build_binaries:
    strategy:
      matrix:
        os:
        - runner: ubuntu-latest
          rid: linux-x64
        - runner: windows-latest
          rid: win-x64
        - runner: macos-latest
          rid: osx-x64
      fail-fast: false
    runs-on: ${{ matrix.os.runner }}
    needs: setup
    steps:
    - uses: actions/checkout@v1
      name: 'Checkout'
    - run: |
        OS=$(echo ${{ runner.os }} | tr A-Z a-z)
        echo "OS=${OS}" >> $GITHUB_ENV

        echo "Version: '${{ needs.setup.outputs.version }}', operating system: '${OS}'"
      name: 'Calculate Package Information (Unix)'
      if: runner.os != 'Windows'
    - run: |
        Write-Output "OS=windows" >> $Env:GITHUB_ENV

        Write-Output "Version: '${{ needs.setup.outputs.version }}', operating system: 'windows'"
      name: 'Calculate Package Information (Windows)'
      if: runner.os == 'Windows'
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'
      name: 'Setup .NET 3.1'
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'
      name: 'Setup .NET 6.0'
    - run: |
        dotnet tool install -g dotnet-warp
    - run: |
        dotnet restore
        dotnet build --no-restore --configuration Release
      name: Build
    - run: |
        dotnet test Foo.Core.Tests/Foo.Core.Tests.csproj --no-build --configuration Release --logger "trx;LogFileName=Foo.Core.Tests.trx"
      name: Test
    - run: |
        mkdir _package

        (cd Foo && dotnet publish --configuration Release --framework net6.0 --runtime ${{ matrix.os.rid }} --self-contained true -p:TreatWarningsAsErrors=false -p:OutputType=Exe -p:PublishSingleFile=true -p:SelfContained=true -p:PublishReadyToRun=true)

        if [ "${{runner.os}}" == "Windows" ]; then
          mv Foo/bin/Release/net6.0/${{ matrix.os.rid }}/publish/Foo.exe "_package/${{ env.PRODUCT_NAME }}.exe"
        else
          mv Foo/bin/Release/net6.0/${{ matrix.os.rid }}/publish/Foo "_package/${{ env.PRODUCT_NAME }}"
          cp installers/install.sh "_package/install.sh"
        fi

        echo "PACKAGE_TEMP=${PACKAGE_TEMP}" >> $GITHUB_ENV
        echo "PACKAGE_FILENAME=${PACKAGE_FILENAME}" >> $GITHUB_ENV
      name: Package Binary
      shell: bash
    - uses: actions/upload-artifact@v1
      with:
        name: ${{ env.PRODUCT_NAME }}-${{ needs.setup.outputs.version }}-${{ env.OS }}
        path: _package
      name: Upload Binary

  package:
    needs: [ setup, build_binaries ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v1
      with:
        name: ${{ env.PRODUCT_NAME }}-${{ needs.setup.outputs.version }}-linux
      name: Download Linux
    - uses: actions/download-artifact@v1
      with:
        name: ${{ env.PRODUCT_NAME }}-${{ needs.setup.outputs.version }}-windows
      name: Download Windows
    - uses: actions/download-artifact@v1
      with:
        name: ${{ env.PRODUCT_NAME }}-${{ needs.setup.outputs.version }}-macos
      name: Download macOS

    - run: |
        mkdir -p _packaging/${{ env.PRODUCT_NAME }}-${{ needs.setup.outputs.version }}-linux
        mkdir -p _packaging/${{ env.PRODUCT_NAME }}-${{ needs.setup.outputs.version }}-windows
        mkdir -p _packaging/${{ env.PRODUCT_NAME }}-${{ needs.setup.outputs.version }}-macos
        mkdir -p _packages

        echo "# Creating Linux package"
        cp ${{ env.PRODUCT_NAME }}-${{ needs.setup.outputs.version }}-linux/* _packaging/${{ env.PRODUCT_NAME }}-${{ needs.setup.outputs.version }}-linux/
        chmod 0755 _packaging/${{ env.PRODUCT_NAME }}-${{ needs.setup.outputs.version }}-linux/repolint
        chmod 0755 _packaging/${{ env.PRODUCT_NAME }}-${{ needs.setup.outputs.version }}-linux/install.sh
        (cd _packaging && tar --owner=root --group=root -cvzf ../_packages/${{ env.PRODUCT_NAME }}-${{ needs.setup.outputs.version }}-linux.tar.gz ${{ env.PRODUCT_NAME }}-${{ needs.setup.outputs.version }}-linux)

        echo "# Creating Windows package"
        cp ${{ env.PRODUCT_NAME }}-${{ needs.setup.outputs.version }}-windows/* _packaging/${{ env.PRODUCT_NAME }}-${{ needs.setup.outputs.version }}-windows/
        (cd _packaging && zip -r ../_packages/${{ env.PRODUCT_NAME }}-${{ needs.setup.outputs.version }}-windows.zip ${{ env.PRODUCT_NAME }}-${{ needs.setup.outputs.version }}-windows)

        echo "# Creating macOS package"
        cp ${{ env.PRODUCT_NAME }}-${{ needs.setup.outputs.version }}-macos/* _packaging/${{ env.PRODUCT_NAME }}-${{ needs.setup.outputs.version }}-macos
        chmod 0755 _packaging/${{ env.PRODUCT_NAME }}-${{ needs.setup.outputs.version }}-macos/repolint
        chmod 0755 _packaging/${{ env.PRODUCT_NAME }}-${{ needs.setup.outputs.version }}-macos/install.sh
        (cd _packaging && zip -r ../_packages/${{ env.PRODUCT_NAME }}-${{ needs.setup.outputs.version }}-macos.zip ${{ env.PRODUCT_NAME }}-${{ needs.setup.outputs.version }}-macos)
      name: Generate Packages

    - uses: actions/upload-artifact@v1
      with:
        name: ${{ env.PRODUCT_NAME }}-${{ needs.setup.outputs.version }}-packages
        path: _packages
      name: Upload Packages

    - uses: geekyeggo/delete-artifact@v1
      with:
        name: ${{ env.PRODUCT_NAME }}-version
      name: Cleanup Version Information
